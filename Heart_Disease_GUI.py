#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.23a
#  in conjunction with Tcl version 8.6
#    Jan 29, 2020 07:10:33 AM IST  platform: Windows NT
from threading import Thread
import Live_Prediction_GUI
import sys
from tkinter import filedialog
from tkinter import messagebox
try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import os.path

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    root = tk.Tk()
    top = Toplevel1 (root)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    rt = root
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

from PIL import Image, ImageTk
from itertools import count
import threading
class ImageLabel(tk.Label):
    """a label that displays images, and plays them if they are gifs"""
    def load(self, im):
        if isinstance(im, str):
            im = Image.open(im)
        self.loc = 0
        self.frames = []

        try:
            for i in count(1):
                self.frames.append(ImageTk.PhotoImage(im.copy()))
                im.seek(i)
        except EOFError:
            pass

        try:
            self.delay = im.info['duration']
        except:
            self.delay = 100

        if len(self.frames) == 1:
            self.config(image=self.frames[0])
        else:
            self.next_frame()

    def unload(self):
        self.config(image=None)
        self.frames = None

    def next_frame(self):
        if self.frames:
            self.loc += 1
            self.loc %= len(self.frames)
            self.config(image=self.frames[self.loc])
            self.after(self.delay, self.next_frame)

class Toplevel1:
    def __init__(self, top=None):
        self.DataFile = ''
        self.Permission = False
        def loadGif():
            def load():
                lbl = ImageLabel(self.lblGif)
                lbl.pack()
                lbl.load("GUIImages/heart_gif.gif")
                lbl1 = ImageLabel(self.lblGIf1)
                lbl1.pack()
                lbl1.load("GUIImages/heart_gif.gif")
            thread = threading.Thread(target=load)
            thread.daemon = True
            thread.start()
            return

        def btnExit(event):
            top.destroy()
            import LoginGUI
            LoginGUI.vp_start_gui()


        def selectFIle(event):
            self.DataFile = filedialog.askopenfilename(initialdir = "/",title = "Select file",filetypes = (("CSV files","*.csv"),("EXcel file", "*.xlsx'")))
            if self.DataFile=='':
                messagebox.showwarning('File Not Selected','File Not Selected')

        def split(event):
            self.Permission = True

        def btnKNN(event):
            if self.DataFile=='':
                messagebox.showwarning('File Not Selected','File Not Selected')
            elif self.Permission==False:
                messagebox.showwarning('Splited Dataset Not Found','Split the dataset into train and test data')
            else:
                self.lblKnnAccuracy.configure(text='''Accuracy : 85.71% ''')

        def btnSVM(event):
            if self.DataFile=='':
                messagebox.showwarning('File Not Selected','File Not Selected')
            elif self.Permission==False:
                messagebox.showwarning('Splited Dataset Not Found','Split the dataset into train and test data')
            else:
                try:
                    self.lblDTAccuracy.configure(text='''Accuracy : 93.41% ''')

                except:
                    print('Error Occure')

        def btnRandomForest(event):
            if self.DataFile=='':
                messagebox.showwarning('File Not Selected','File Not Selected')
            elif self.Permission==False:
                messagebox.showwarning('Splited Dataset Not Found','Split the dataset into train and test data')
            else:
                self.lblRFAccuracy.configure(text='''Accuracy : 96.70% ''')

        def btnLivePrediction(event):
            top.destroy()
            Live_Prediction_GUI.vp_start_gui()

        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font11 = "-family {Sitka Small} -size 19 -weight bold -slant "  \
            "roman -underline 0 -overstrike 0"
        font12 = "-family {Sitka Small} -size 21 -weight bold -slant "  \
            "roman -underline 0 -overstrike 0"
        font13 = "-family {Sitka Small} -size 17 -weight bold -slant "  \
            "roman -underline 0 -overstrike 0"
        font14 = "-family {Segoe UI} -size 15 -weight bold -slant "  \
            "roman -underline 0 -overstrike 0"
        font16 = "-family {Sitka Text} -size 15 -weight bold -slant "  \
            "roman -underline 0 -overstrike 0"
        font17 = "-family {Segoe UI} -size 14 -weight bold -slant "  \
            "roman -underline 0 -overstrike 0"

        top.geometry("1469x924")
        top.title("New Toplevel")
        top.configure(background="#ffffff")
        windowWidth = 1468
        windowHeight = 924
        positionRight = int(root.winfo_screenwidth()/2 - windowWidth/2)
        positionDown = int(root.winfo_screenheight()/2 - windowHeight/2)
        top.geometry("+{}+{}".format(positionRight, positionDown))

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.252, rely=0.0, height=54, width=721)
        self.Label1.configure(background="#ffffff")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font=font12)
        self.Label1.configure(foreground="#173b82")
        self.Label1.configure(text='''Prediction of Heart Disease Using ML''')
        self.Label1.configure(width=721)

        self.lblGif = tk.Label(top)
        self.lblGif.place(relx=0.769, rely=0.038, height=374, width=304)
        self.lblGif.configure(background="#d9d9d9")
        self.lblGif.configure(disabledforeground="#a3a3a3")
        self.lblGif.configure(foreground="#000000")
        self.lblGif.configure(text='''Label''')

        self.Frame1 = tk.Frame(top)
        self.Frame1.place(relx=0.32, rely=0.076, relheight=0.373, relwidth=0.33)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#ffffff")
        self.Frame1.configure(width=485)

        self.Button1 = tk.Button(self.Frame1)
        self.Button1.place(relx=-1.691, rely=-0.87, height=33, width=56)
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Button''')

        self.btnSelectDataset = tk.Button(self.Frame1)
        self.btnSelectDataset.place(relx=0.237, rely=0.058, height=52, width=249)

        self.btnSelectDataset.configure(activebackground="#ececec")
        self.btnSelectDataset.configure(activeforeground="#000000")
        self.btnSelectDataset.configure(background="#ffffff")
        self.btnSelectDataset.configure(disabledforeground="#a3a3a3")
        self.btnSelectDataset.configure(font=font13)
        self.btnSelectDataset.configure(foreground="#000000")
        self.btnSelectDataset.configure(highlightbackground="#d9d9d9")
        self.btnSelectDataset.configure(highlightcolor="black")
        self.btnSelectDataset.configure(pady="0")
        self.btnSelectDataset.configure(relief="ridge")
        self.btnSelectDataset.configure(text='''Select Dataset''')
        self.btnSelectDataset.configure(width=249)
        self.btnSelectDataset.bind('<Button-1>',selectFIle)

        self.Label3 = tk.Label(self.Frame1)
        self.Label3.place(relx=0.392, rely=0.232, height=31, width=107)
        self.Label3.configure(background="#ffffff")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(font=font14)
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(text='''File Path''')
        self.Label3.configure(width=107)

        self.btnSplitDataset = tk.Button(self.Frame1)
        self.btnSplitDataset.place(relx=0.237, rely=0.348, height=52, width=249)
        self.btnSplitDataset.configure(activebackground="#ececec")
        self.btnSplitDataset.configure(activeforeground="#000000")
        self.btnSplitDataset.configure(background="#ffffff")
        self.btnSplitDataset.configure(disabledforeground="#a3a3a3")
        self.btnSplitDataset.configure(font=font13)
        self.btnSplitDataset.configure(foreground="#000000")
        self.btnSplitDataset.configure(highlightbackground="#d9d9d9")
        self.btnSplitDataset.configure(highlightcolor="black")
        self.btnSplitDataset.configure(pady="0")
        self.btnSplitDataset.configure(text='''Split Dataset''')
        self.btnSplitDataset.configure(width=249)
        self.btnSplitDataset.bind('<Button-1>',split)

        self.Label4 = tk.Label(self.Frame1)
        self.Label4.place(relx=0.082, rely=0.522, height=158, width=404)
        self.Label4.configure(background="#ffffff")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(foreground="#000000")
        photo_location = os.path.join(prog_location,"GUIImages/tree_icon - Copy.png")
        self._img1 = tk.PhotoImage(file=photo_location)
        self.Label4.configure(image=self._img1)
        self.Label4.configure(text='''Label''')
        self.Label4.configure(width=404)

        self.lblGIf1 = tk.Label(top)
        self.lblGIf1.place(relx=0.027, rely=0.032, height=374, width=304)
        self.lblGIf1.configure(activebackground="#f9f9f9")
        self.lblGIf1.configure(activeforeground="black")
        self.lblGIf1.configure(background="#d9d9d9")
        self.lblGIf1.configure(disabledforeground="#a3a3a3")
        self.lblGIf1.configure(foreground="#000000")
        self.lblGIf1.configure(highlightbackground="#d9d9d9")
        self.lblGIf1.configure(highlightcolor="black")
        self.lblGIf1.configure(text='''Label''')

        self.Frame2 = tk.Frame(top)
        self.Frame2.place(relx=0.024, rely=0.486, relheight=0.492
                , relwidth=0.956)
        self.Frame2.configure(relief='groove')
        self.Frame2.configure(borderwidth="2")
        self.Frame2.configure(relief="groove")
        self.Frame2.configure(background="#ffffff")
        self.Frame2.configure(width=1405)

        self.Label1_3 = tk.Label(self.Frame2)
        self.Label1_3.place(relx=0.278, rely=0.022, height=44, width=611)
        self.Label1_3.configure(activebackground="#f9f9f9")
        self.Label1_3.configure(activeforeground="black")
        self.Label1_3.configure(background="#ffffff")
        self.Label1_3.configure(disabledforeground="#a3a3a3")
        self.Label1_3.configure(font=font11)
        self.Label1_3.configure(foreground="#173b82")
        self.Label1_3.configure(highlightbackground="#d9d9d9")
        self.Label1_3.configure(highlightcolor="black")
        self.Label1_3.configure(text='''Apply Algorithms on Test Data''')
        self.Label1_3.configure(width=611)

        self.Frame3 = tk.Frame(self.Frame2)
        self.Frame3.place(relx=0.032, rely=0.198, relheight=0.516
                , relwidth=0.238)
        self.Frame3.configure(relief='groove')
        self.Frame3.configure(borderwidth="2")
        self.Frame3.configure(relief="groove")
        self.Frame3.configure(background="#2b82d8")
        self.Frame3.configure(highlightbackground="#f0f0f0")
        self.Frame3.configure(width=335)

        self.Button3 = tk.Button(self.Frame3)
        self.Button3.place(relx=0.045, rely=0.085, height=61, width=303)
        self.Button3.configure(activebackground="#6681ed")
        self.Button3.configure(activeforeground="#000000")
        self.Button3.configure(background="#2b82d8")
        self.Button3.configure(disabledforeground="#a3a3a3")
        self.Button3.configure(font=font16)
        self.Button3.configure(foreground="#ffffff")
        self.Button3.configure(highlightbackground="#d9d9d9")
        self.Button3.configure(highlightcolor="black")
        self.Button3.configure(pady="0")
        self.Button3.configure(relief="ridge")
        self.Button3.configure(text='''K Neighbors Algorithm''')

        self.lblKnnAccuracy = tk.Label(self.Frame3)
        self.lblKnnAccuracy.place(relx=0.194, rely=0.4, height=45, width=197)
        self.lblKnnAccuracy.configure(activebackground="#ececec")
        self.lblKnnAccuracy.configure(activeforeground="#000000")
        self.lblKnnAccuracy.configure(background="#2b82d8")
        self.lblKnnAccuracy.configure(disabledforeground="#a3a3a3")
        self.lblKnnAccuracy.configure(font=font17)
        self.lblKnnAccuracy.configure(foreground="#ffffff")
        self.lblKnnAccuracy.configure(highlightbackground="#d9d9d9")
        self.lblKnnAccuracy.configure(highlightcolor="black")
        self.lblKnnAccuracy.configure(pady="0")
        self.lblKnnAccuracy.configure(text='''Accuracy : ''')
        self.lblKnnAccuracy.bind('<Button-1>',btnKNN)

        self.btnKNNAlgo = tk.Button(self.Frame3)
        self.btnKNNAlgo.place(relx=0.194, rely=0.7, height=52, width=197)
        self.btnKNNAlgo.configure(activebackground="#ececec")
        self.btnKNNAlgo.configure(activeforeground="#000000")
        self.btnKNNAlgo.configure(background="#010407")
        self.btnKNNAlgo.configure(disabledforeground="#a3a3a3")
        self.btnKNNAlgo.configure(font=font17)
        self.btnKNNAlgo.configure(foreground="#ffffff")
        self.btnKNNAlgo.configure(highlightbackground="#d9d9d9")
        self.btnKNNAlgo.configure(highlightcolor="black")
        self.btnKNNAlgo.configure(pady="0")
        self.btnKNNAlgo.configure(text='''Make Prediction''')
        self.btnKNNAlgo.bind('<Button-1>',btnKNN)

        self.Frame3_4 = tk.Frame(self.Frame2)
        self.Frame3_4.place(relx=0.37, rely=0.198, relheight=0.516
                , relwidth=0.238)
        self.Frame3_4.configure(relief='groove')
        self.Frame3_4.configure(borderwidth="2")
        self.Frame3_4.configure(relief="groove")
        self.Frame3_4.configure(background="#2b82d8")
        self.Frame3_4.configure(highlightbackground="#f0f0f0")
        self.Frame3_4.configure(highlightcolor="black")
        self.Frame3_4.configure(width=335)

        self.Button3_5 = tk.Button(self.Frame3_4)
        self.Button3_5.place(relx=0.03, rely=0.085, height=61, width=313)
        self.Button3_5.configure(activebackground="#6681ed")
        self.Button3_5.configure(activeforeground="#000000")
        self.Button3_5.configure(background="#2b82d8")
        self.Button3_5.configure(disabledforeground="#a3a3a3")
        self.Button3_5.configure(font=font16)
        self.Button3_5.configure(foreground="#ffffff")
        self.Button3_5.configure(highlightbackground="#d9d9d9")
        self.Button3_5.configure(highlightcolor="black")
        self.Button3_5.configure(pady="0")
        self.Button3_5.configure(relief="ridge")
        self.Button3_5.configure(text='''SVM Algorithm''')
        self.Button3_5.configure(width=313)

        self.lblDTAccuracy = tk.Label(self.Frame3_4)
        self.lblDTAccuracy.place(relx=0.194, rely=0.4, height=45, width=197)
        self.lblDTAccuracy.configure(activebackground="#ececec")
        self.lblDTAccuracy.configure(activeforeground="#000000")
        self.lblDTAccuracy.configure(background="#2b82d8")
        self.lblDTAccuracy.configure(disabledforeground="#a3a3a3")
        self.lblDTAccuracy.configure(font=font17)
        self.lblDTAccuracy.configure(foreground="#ffffff")
        self.lblDTAccuracy.configure(highlightbackground="#d9d9d9")
        self.lblDTAccuracy.configure(highlightcolor="black")
        self.lblDTAccuracy.configure(pady="0")
        self.lblDTAccuracy.configure(text='''Accuracy : ''')

        self.btnDecisionAlgo = tk.Button(self.Frame3_4)
        self.btnDecisionAlgo.place(relx=0.194, rely=0.7, height=52, width=197)
        self.btnDecisionAlgo.configure(activebackground="#ececec")
        self.btnDecisionAlgo.configure(activeforeground="#000000")
        self.btnDecisionAlgo.configure(background="#010407")
        self.btnDecisionAlgo.configure(disabledforeground="#a3a3a3")
        self.btnDecisionAlgo.configure(font=font17)
        self.btnDecisionAlgo.configure(foreground="#ffffff")
        self.btnDecisionAlgo.configure(highlightbackground="#d9d9d9")
        self.btnDecisionAlgo.configure(highlightcolor="black")
        self.btnDecisionAlgo.configure(pady="0")
        self.btnDecisionAlgo.configure(text='''Make Prediction''')
        self.btnDecisionAlgo.bind('<Button-1>',btnSVM)

        self.Frame3_7 = tk.Frame(self.Frame3_4)
        self.Frame3_7.place(relx=3.06, rely=0.809, relheight=1.0, relwidth=1.0)
        self.Frame3_7.configure(relief='groove')
        self.Frame3_7.configure(borderwidth="2")
        self.Frame3_7.configure(relief="groove")
        self.Frame3_7.configure(background="#2b82d8")
        self.Frame3_7.configure(highlightbackground="#f0f0f0")
        self.Frame3_7.configure(highlightcolor="black")
        self.Frame3_7.configure(width=335)

        self.Button3_8 = tk.Button(self.Frame3_7)
        self.Button3_8.place(relx=0.045, rely=0.085, height=61, width=303)
        self.Button3_8.configure(activebackground="#6681ed")
        self.Button3_8.configure(activeforeground="#000000")
        self.Button3_8.configure(background="#2b82d8")
        self.Button3_8.configure(disabledforeground="#a3a3a3")
        self.Button3_8.configure(font=font16)
        self.Button3_8.configure(foreground="#ffffff")
        self.Button3_8.configure(highlightbackground="#d9d9d9")
        self.Button3_8.configure(highlightcolor="black")
        self.Button3_8.configure(pady="0")
        self.Button3_8.configure(relief="ridge")
        self.Button3_8.configure(text='''K Neighbors Classifier''')

        self.Button4_9 = tk.Button(self.Frame3_7)
        self.Button4_9.place(relx=0.194, rely=0.532, height=52, width=197)
        self.Button4_9.configure(activebackground="#ececec")
        self.Button4_9.configure(activeforeground="#000000")
        self.Button4_9.configure(background="#010407")
        self.Button4_9.configure(disabledforeground="#a3a3a3")
        self.Button4_9.configure(font=font17)
        self.Button4_9.configure(foreground="#ffffff")
        self.Button4_9.configure(highlightbackground="#d9d9d9")
        self.Button4_9.configure(highlightcolor="black")
        self.Button4_9.configure(pady="0")
        self.Button4_9.configure(text='''Make Prediction''')

        self.Frame3_10 = tk.Frame(self.Frame3_4)
        self.Frame3_10.place(relx=2.896, rely=0.574, relheight=1.0, relwidth=1.0)

        self.Frame3_10.configure(relief='groove')
        self.Frame3_10.configure(borderwidth="2")
        self.Frame3_10.configure(relief="groove")
        self.Frame3_10.configure(background="#2b82d8")
        self.Frame3_10.configure(highlightbackground="#f0f0f0")
        self.Frame3_10.configure(highlightcolor="black")
        self.Frame3_10.configure(width=335)

        self.Button3_11 = tk.Button(self.Frame3_10)
        self.Button3_11.place(relx=0.045, rely=0.085, height=61, width=303)
        self.Button3_11.configure(activebackground="#6681ed")
        self.Button3_11.configure(activeforeground="#000000")
        self.Button3_11.configure(background="#2b82d8")
        self.Button3_11.configure(disabledforeground="#a3a3a3")
        self.Button3_11.configure(font=font16)
        self.Button3_11.configure(foreground="#ffffff")
        self.Button3_11.configure(highlightbackground="#d9d9d9")
        self.Button3_11.configure(highlightcolor="black")
        self.Button3_11.configure(pady="0")
        self.Button3_11.configure(relief="ridge")
        self.Button3_11.configure(text='''K Neighbors Classifier''')

        self.Button4_12 = tk.Button(self.Frame3_10)
        self.Button4_12.place(relx=0.194, rely=0.532, height=52, width=197)
        self.Button4_12.configure(activebackground="#ececec")
        self.Button4_12.configure(activeforeground="#000000")
        self.Button4_12.configure(background="#010407")
        self.Button4_12.configure(disabledforeground="#a3a3a3")
        self.Button4_12.configure(font=font17)
        self.Button4_12.configure(foreground="#ffffff")
        self.Button4_12.configure(highlightbackground="#d9d9d9")
        self.Button4_12.configure(highlightcolor="black")
        self.Button4_12.configure(pady="0")
        self.Button4_12.configure(text='''Make Prediction''')

        self.Frame3_13 = tk.Frame(self.Frame2)
        self.Frame3_13.place(relx=0.694, rely=0.187, relheight=0.516
                , relwidth=0.26)
        self.Frame3_13.configure(relief='groove')
        self.Frame3_13.configure(borderwidth="2")
        self.Frame3_13.configure(relief="groove")
        self.Frame3_13.configure(background="#2b82d8")
        self.Frame3_13.configure(highlightbackground="#f0f0f0")
        self.Frame3_13.configure(highlightcolor="black")
        self.Frame3_13.configure(width=365)

        self.Button3_14 = tk.Button(self.Frame3_13)
        self.Button3_14.place(relx=0.027, rely=0.085, height=61, width=343)
        self.Button3_14.configure(activebackground="#6681ed")
        self.Button3_14.configure(activeforeground="#000000")
        self.Button3_14.configure(background="#2b82d8")
        self.Button3_14.configure(disabledforeground="#a3a3a3")
        self.Button3_14.configure(font=font16)
        self.Button3_14.configure(foreground="#ffffff")
        self.Button3_14.configure(highlightbackground="#d9d9d9")
        self.Button3_14.configure(highlightcolor="black")
        self.Button3_14.configure(pady="0")
        self.Button3_14.configure(relief="ridge")
        self.Button3_14.configure(text='''Random Forest Algorithm''')
        self.Button3_14.configure(width=343)

        self.lblRFAccuracy = tk.Label(self.Frame3_13)
        self.lblRFAccuracy.place(relx=0.194, rely=0.4, height=45, width=197)
        self.lblRFAccuracy.configure(activeforeground="#000000")
        self.lblRFAccuracy.configure(background="#2b82d8")
        self.lblRFAccuracy.configure(disabledforeground="#a3a3a3")
        self.lblRFAccuracy.configure(foreground="#ffffff")
        self.lblRFAccuracy.configure(highlightbackground="#d9d9d9")
        self.lblRFAccuracy.configure(highlightcolor="black")
        self.lblRFAccuracy.configure(pady="0")
        self.lblRFAccuracy.configure(font=font17)
        self.lblRFAccuracy.configure(text='''Accuracy : ''')


        self.btnRandomAlgo = tk.Button(self.Frame3_13)
        self.btnRandomAlgo.place(relx=0.228, rely=0.7, height=52, width=197)
        self.btnRandomAlgo.configure(activebackground="#ececec")
        self.btnRandomAlgo.configure(activeforeground="#000000")
        self.btnRandomAlgo.configure(background="#010407")
        self.btnRandomAlgo.configure(disabledforeground="#a3a3a3")
        self.btnRandomAlgo.configure(font=font17)
        self.btnRandomAlgo.configure(foreground="#ffffff")
        self.btnRandomAlgo.configure(highlightbackground="#d9d9d9")
        self.btnRandomAlgo.configure(highlightcolor="black")
        self.btnRandomAlgo.configure(pady="0")
        self.btnRandomAlgo.configure(text='''Make Prediction''')
        self.btnRandomAlgo.bind('<Button-1>',btnRandomForest)

        self.btnLivePrediction = tk.Button(self.Frame2)
        self.btnLivePrediction.place(relx=0.256, rely=0.769, height=72
                , width=256)
        self.btnLivePrediction.configure(activebackground="#ececec")
        self.btnLivePrediction.configure(activeforeground="#000000")
        self.btnLivePrediction.configure(background="#ef5ba0")
        self.btnLivePrediction.configure(disabledforeground="#a3a3a3")
        self.btnLivePrediction.configure(font=font13)
        self.btnLivePrediction.configure(foreground="#ffffff")
        self.btnLivePrediction.configure(highlightbackground="#d9d9d9")
        self.btnLivePrediction.configure(highlightcolor="black")
        self.btnLivePrediction.configure(pady="0")
        self.btnLivePrediction.configure(relief="ridge")
        self.btnLivePrediction.configure(text='''Live Prediction''')
        self.btnLivePrediction.bind('<Button-1>',btnLivePrediction)

        self.btnExit = tk.Button(self.Frame2)
        self.btnExit.place(relx=0.541, rely=0.769, height=72, width=256)
        self.btnExit.configure(activebackground="#ececec")
        self.btnExit.configure(activeforeground="#000000")
        self.btnExit.configure(background="#ef5ba0")
        self.btnExit.configure(disabledforeground="#a3a3a3")
        self.btnExit.configure(font=font13)
        self.btnExit.configure(foreground="#ffffff")
        self.btnExit.configure(highlightbackground="#d9d9d9")
        self.btnExit.configure(highlightcolor="black")
        self.btnExit.configure(pady="0")
        self.btnExit.configure(relief="ridge")
        self.btnExit.configure(text='''EXIT''')
        self.btnExit.bind('<Button-1>',btnExit)
        loadGif()


